// Code generated by mockery v1.0.0. DO NOT EDIT.

package dto

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// AddArticle provides a mock function with given fields: ctx, art
func (_m *MockRepository) AddArticle(ctx context.Context, art *Article) error {
	ret := _m.Called(ctx, art)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Article) error); ok {
		r0 = rf(ctx, art)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetArticle provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetArticle(ctx context.Context, id string) (*Article, error) {
	ret := _m.Called(ctx, id)

	var r0 *Article
	if rf, ok := ret.Get(0).(func(context.Context, string) *Article); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Article)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListArticles provides a mock function with given fields: ctx
func (_m *MockRepository) ListArticles(ctx context.Context) ([]*Article, error) {
	ret := _m.Called(ctx)

	var r0 []*Article
	if rf, ok := ret.Get(0).(func(context.Context) []*Article); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Article)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
